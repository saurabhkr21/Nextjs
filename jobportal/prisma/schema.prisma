// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model job {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  job_title       String? @map("job_title")
  job_description String? @map("job_description")
  job_salary      Int?    @map("job_salary")
  job_type        String? @map("job_type")
  job_location    String? @map("job_location")
  employment_type String? @default("fullTime")
  employer_name   String? @map("employer_name")
  employer_logo   String? @map("employer_logo")
  jobApplyLink    String? @map("jobApplyLink")
  companyId       String  @db.ObjectId
  company         company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  applications    application[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// model Resume {
//   id             String  @id @default(auto()) @map("_id") @db.ObjectId
//   qualification  String?
//   education      String?
//   cgpa           String?
//   graduationYear String?
//   ownerId        String  @unique @db.ObjectId
//   owner          user    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
// }
enum Role {
  EMPLOYER
  EMPLOYEE
}

model user {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  email        String        @unique
  password     String
  role         Role          @default(EMPLOYEE)
  company      company?      @relation("UserCompany")
  // Resume   Resume?
  reviews      Review[]
  applications application[]
}

model Review {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  user_id    String @db.ObjectId
  user       user   @relation(fields: [user_id], references: [id])
  company_id String
}

model company {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  ownerId     String  @unique @db.ObjectId
  image_url   String?
  description String?
  owner       user    @relation("UserCompany", fields: [ownerId], references: [id], onDelete: Cascade)
  jobs       job[]
}

model application {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user_id String @db.ObjectId
  job_id  String @db.ObjectId
  user    user   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  job     job    @relation(fields: [job_id], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@unique([user_id, job_id])
}
